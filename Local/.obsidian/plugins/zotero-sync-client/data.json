{
  "api_key": "TYEa8cx0BlpNA0LUSUnmULJp",
  "sync_on_startup": true,
  "sync_on_interval": false,
  "sync_interval": 0,
  "note_generator": "\nlet n = '';\n\n\n\n// Minha alteração\nif (data.itemType) {\n    let itemType = data.itemType;\n    let tipo = '';\n    if(itemType == 'book'){\n        tipo = 'Livro';\n    }else if(itemType == 'newspaperArticle'){\n        tipo = 'Artigo';\n    }else if(itemType == 'bookSection'){\n        tipo = 'Seção de Livro';\n    }else if(itemType == 'document'){\n        tipo = 'Documento';\n    }else{\n        tipo = itemType;\n    }\n}\n\nif (data.creators) {\n\tdata.creators.forEach(author => {\n        n += 'Autor: ';\n\tn += '[[People/' + author.firstName + ' ' + author.lastName + ']] '; \n        n += ' ';\n\t});\n\tn += '\\n';\n}\nif (data.date) {\n\tlet year = new Date(data.date).getFullYear();\n\tn += 'Ano: ' + year.toString();\n}\nn += '\\n';\n\n\n//n += '# ' + data.title;\nn += '# Conteúdo\\n\\n';\nif (data.children) {\n\tconst notes = data.children.filter(\n\t\tc => c.itemType.toLowerCase() == 'note'\n\t)\n\n\n       // Faz a ordenação dos itens\n       notes.sort(\n(a, b) => (parseInt(a.note_markdown.split(\"-\")[0]) ||1) - (parseInt(b.note_markdown.split(\"-\")[0]) || 98 ) \n);\n\n\n\tnotes.forEach(c => {\n\t\tn += c.note_markdown + '\\n\\n';\n\t});\n}\nreturn n;",
  "filepath_generator": "let fp = '';\nif (data.creators && data.creators.length > 0) {\nfp += data.creators[0]?.lastName;\nif (data.creators.length == 2) {\n\tfp += '+';\n\tfp += data.creators[1]?.lastName;\n} else if (data.creators.length > 2) {\n\tfp += '+';\n}\nif (data.date) {\n\tlet year = new Date(data.date).getFullYear();\n\tfp += year.toString();\n}\n\nlet localizacao = '';\nif(data.archiveLocation){\n    localizacao = data.archiveLocation;\n}else if(data.place){\n    localizacao = data.place;\n}\n\n//return 'References/'+ fp;\nreturn 'Externos/Zotero/'+localizacao+'/' + data.title;\n}\n"
}